View(lemay_metadata)
View(lemay_otu)
#get rid of the taxonomy column (2nd)
lemay_otu = as.data.frame(lemay_otu[,-2])
#tranpose them
lemay_otu = as.data.frame(t(lemay_otu))
lemay_otu=data.matrix(lemay_otu)
colnames(lemay_otu)=lemay_otu[1,]  #name of first row to column
lemay_otu=as.data.frame(lemay_otu[-1,]) #deletes 1st row
names(lemay_otu)[0]=paste("SampleID")
lemay_otu <- cbind(rownames(lemay_otu), lemay_otu)
rownames(lemay_otu) <- NULL
colnames(lemay_otu)[1] <- "SampleID"
#give Sample ID column the same format
lemay_metadata$SampleID = sub("-",".",lemay_metadata$SampleID)
View(lemay_otu)
View(lemay_metadata)
# read kelp_otu
kelp_otu = read.table("Lemay_kelp_OTUtable.txt",
header = TRUE, sep = "\t",comment.char="&" ) # read OTU table
col_names_otu = kelp_otu$X.OTU.ID # store OTU.ID as future column names
kelp_otu = as.data.frame(kelp_otu[,-(1:2)]) # remove first 2 columns
kelp_otu = as.data.frame(t(kelp_otu[,-1])) # rotate columns and rows
names(kelp_otu) = col_names_otu # add OTU.ID as column names
kelp_otu <- cbind(X.SampleID = rownames(kelp_otu), data.frame(kelp_otu, row.names=NULL))
# add default row names, make samle ID as a column
View(kelp_otu)
kelp_metadata = read.table("Lemay_kelp_matadata.txt",
header = TRUE, sep = "\t", comment.char="&") # read metadata
kelp_metadata$X.SampleID = sub("-",".",kelp_metadata$X.SampleID) # replace "-" with "."
View(kelp_metadata)
kelp_metadata = read.table("Lemay_kelp_matadata.txt",
header = TRUE, sep = "\t", comment.char="&")
View(kelp_metadata)
kelp_otu = read.table("Lemay_kelp_OTUtable.txt",
header = TRUE, sep = "\t",comment.char="&" )
View(kelp_otu)
kelp_otu = as.data.frame(kelp_otu[,-2])
View(kelp_otu)
col_names_otu = kelp_otu$X.OTU.ID # store OTU.ID as future column names
kelp_otu = as.data.frame(kelp_otu[,-1]) # remove first 2 columns
kelp_otu = read.table("Lemay_kelp_OTUtable.txt",
header = TRUE, sep = "\t",comment.char="&" ) # read OTU table
kelp_otu = as.data.frame(kelp_otu[,-2]) # remove taxonomy
col_names_otu = kelp_otu$X.OTU.ID # store OTU.ID as future column names
kelp_otu = as.data.frame(t(kelp_otu[,-1])) # rotate columns and rows
names(kelp_otu) = col_names_otu # add OTU.ID as column names
kelp_otu <- cbind(X.SampleID = rownames(kelp_otu), data.frame(kelp_otu, row.names=NULL))
View(kelp_otu)
library(tidyverse)
otu.metadata_merged = inner_join(lemay_otu,lemay_metadata,by="SampleID")
View(otu.metadata_merged)
# read kelp_otu
kelp_otu = read.table("Lemay_kelp_OTUtable.txt",
header = TRUE, sep = "\t",comment.char="&" ) # read OTU table
kelp_otu = as.data.frame(kelp_otu[,-2]) # remove taxonomy
col_names_otu = kelp_otu$X.OTU.ID # store OTU.ID as future column names
kelp_otu = as.data.frame(t(kelp_otu[,-1])) # rotate columns and rows
names(kelp_otu) = col_names_otu # add OTU.ID as column names
kelp_otu <- cbind(X.SampleID = rownames(kelp_otu), data.frame(kelp_otu, row.names=NULL))
# add default row names, make samle ID as a column
View(kelp_otu)
kelp_metadata = read.table("Lemay_kelp_matadata.txt",
header = TRUE, sep = "\t", comment.char="&") # read metadata
kelp_metadata$X.SampleID = sub("-",".",kelp_metadata$X.SampleID) # replace "-" with "."
my_colors=c("#d13b00","#2e12bc","#a7b32f","#9d38e9","#256600","#ff69e2","#01be89","#ff2998",
"#655700","#0069d3","#f99128","#014d91","#ff3672","#ada0f4","#6c240b","#ff6ed2",
"#6e1c3b","#f488bf","#c50050","#6e4974")
# filter out samples that do not appear in both otu and metadata
kelp_otu_metadata = inner_join(kelp_metadata,kelp_otu,by="X.SampleID")
View(kelp_otu_metadata)
kelp_metadata = kelp_otu_metadata[,1:20] # metadata
kelp_otu = kelp_otu_metadata[,-(1:20)] # otu table
View(kelp_metadata)
View(kelp_otu)
total_richness = rowSums(kelp_otu > 0) # calculate total richness
kelp_metadata = cbind(kelp_metadata,total_richness)
View(kelp_metadata)
# put the new metadata and otu back together
kelp_otu_metadata = as.data.frame(cbind(kelp_metadata,kelp_otu))
# get 20 most OTU rich samples
kelp_top20 = sort(total_richness, decreasing = TRUE)[1:20]
kelp_top20
# after running `kelp_top20` I found the most richness is 1248, and the 20th most richness is 714
kelp_otu_metadata$X.SampleID[which(total_richness == 1248)]
kelp_otu_metadata$X.SampleID[which(total_richness == 714)]
## Task 3)
# filter out samples with reads < 10000
kelp_more_reads = filter(kelp_otu_metadata, reads > 10000)
## Task 4)
# new dataframe for seaweed (still reads < 10000)
seaweed = filter(kelp_more_reads, Sample_type == "seaweed")
seaweed_metadata = seaweed[,(1:21)] # seaweed metadata
seaweed_otu = seaweed[,-(1:21)] # seaweed otu
View(seaweed_metadata)
View(seaweed_otu)
# gather OTU names and abundances
seaweed_grouped = gather(seaweed, key = "ASV", value = "abundance", -(1:21))
# get abundance for each OTU in all samples
seaweed_total_abundance = colSums(seaweed_otu)
N = 15
seaweed_top_N_abundance = names(sort(seaweed_total_abundance, decreasing = TRUE)[1:N]) # top N abundance's name
# get abundance of all OTUs in each sample
seaweed_total_abundance = rowSums(seaweed_otu) # calculate total abundance
seaweed_metadata = cbind(seaweed_metadata, seaweed_total_abundance) # add total abundance as a new column
seaweed = as.data.frame(cbind(seaweed_metadata, seaweed_otu)) # update kelp_otu_metadata
seaweed_grouped_top_N = filter(seaweed_grouped, ASV %in% seaweed_top_N_abundance) # keep rows only where ASV is top N abundance
site.labs <- c("Golden Island", "Starfish Island", "Triquet Bay", "West Beach")
names(site.labs) <- c("Golden.Island", "Starfish.Island", "Triquet.Bay", "West.Beach")
ggplot(seaweed_grouped, aes(x = X.SampleID, y = abundance, fill = ASV))+
geom_bar(stat = "identity", position = "fill", color = "white")+
facet_grid(~Site, scales = "free_x", space = "free",
labeller = labeller(Site = site.labs)) +
labs(x = "Sample", y = "Relative abundance") +
theme_bw() +
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.ticks.x = element_blank())+
scale_y_continuous(expand=c(0,0))
View(kelp_more_reads)
ggplot(seaweed_grouped_top_N, aes(x = X.SampleID, y = abundance/seaweed_total_abundance, fill = ASV))+
geom_bar(stat = "identity", position = "stack", color = "white")+
expand_limits(y=c(0,1))+
facet_grid(~Site, scales = "free_x", space = "free",
labeller = labeller(Site = site.labs)) +
labs(x = "Sample",fill = "OTU", y = "Relative abundance") +
theme_bw()+
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
scale_fill_manual(values = my_colors)+
scale_y_continuous(expand=c(0,0))
## Task 5)
# gather OTU names and abundances
kelp_grouped = gather(kelp_otu_metadata, key = "ASV", value = "abundance", -(1:21))
View(kelp_grouped)
# get abundance for each OTU in all samples
kelp_total_abundance = colSums(kelp_otu)
kelp_top_N_abundance = names(sort(kelp_total_abundance, decreasing = TRUE)[1:N]) # top N abundance's name
# get abundance of all OTUs in each sample
kelp_total_abundance = rowSums(kelp_otu) # calculate total abundance
kelp_metadata = cbind(kelp_metadata,kelp_total_abundance) # add total abundance as a new column
kelp = as.data.frame(cbind(kelp_metadata,kelp_otu)) # update kelp_otu_metadata
kelp_grouped_top_N = filter(kelp_grouped, ASV %in% kelp_top_N_abundance) # keep rows only where ASV is top N abundance
# plot: top N OTUs in different sample types
type.labs <- c("Seaweed", "Rock", "Water")
names(type.labs) <- c("seaweed", "rock", "water") # change text of facet labels
kelp_grouped_top_N$sample_type_2 <- factor(kelp_grouped_top_N$Sample_type, levels=c("rock", "water", "seaweed"))
ggplot(kelp_grouped_top_N, aes(x = X.SampleID, y = abundance/kelp_total_abundance, fill = ASV))+
geom_bar(stat = "identity", position = "stack", color = "white")+ # stack shows different height, fill makes the same
expand_limits(y=c(0,1))+ # add y scale maximum "1.00" to the plot
facet_grid(~sample_type_2, scales = "free_x", space = "free",
labeller = labeller(sample_type_2 = type.labs)) + # ignore blank spaces, make different regions have different widths
labs(x = "Sample", fill = "OTU",y = "Relative abundance") + # change legend title and axes' name
theme_bw()+
theme(axis.text.x = element_blank(), # hide x axis names
axis.ticks.x = element_blank()) + # hide x axis ticks
scale_fill_manual(values = my_colors)+
scale_y_continuous(expand=c(0,0))
setwd("D:/BIOL448J_Lab/Lab04")
#read Lemay kelp metadata
lemay_metadata = read.table("Lemay_kelp_matadata(1).txt", header=TRUE,sep="\t")
#read Lemay kelp otu data
lemay_otu = read.table("Lemay_kelp_OTUtable(1).txt",header=TRUE,sep="\t")
#read Lemay kelp metadata
lemay_metadata = read.table("Lemay_kelp_matadata(1).txt", header=TRUE,sep="\t")
#read Lemay kelp otu data
lemay_otu = read.table("Lemay_kelp_OTUtable(1).txt",header=TRUE,sep="\t")
#get rid of the taxonomy column (2nd)
lemay_otu = as.data.frame(lemay_otu[,-2])
#tranpose them
lemay_otu = as.data.frame(t(lemay_otu))
lemay_otu=data.matrix(lemay_otu)
colnames(lemay_otu)=lemay_otu[1,]  #name of first row to column
lemay_otu=as.data.frame(lemay_otu[-1,]) #deletes 1st row
names(lemay_otu)[0]=paste("SampleID")
lemay_otu <- cbind(rownames(lemay_otu), lemay_otu)
rownames(lemay_otu) <- NULL
colnames(lemay_otu)[1] <- "SampleID"
#give Sample ID column the same format
lemay_metadata$SampleID = sub("-",".",lemay_metadata$SampleID)
otu.metadata_merged = inner_join(lemay_otu,lemay_metadata,by="SampleID")
library(tidyverse)
otu.metadata_merged = inner_join(lemay_otu,lemay_metadata,by="SampleID")
View(otu.metadata_merged)
otu.metadata_merged = inner_join(lemay_metadata,lemay_otu,by="SampleID")
View(otu.metadata_merged)
library(gapminder)
library(tidyverse)
library(forcats)
library(ggplot2)
library(dplyr)
gapminder %>%
filter(year == 1997) %>%
mutate(life_level = case_when(lifeExp < 23 ~ "very low",
lifeExp < 48 ~ "low",
lifeExp < 59 ~ "moderate",
lifeExp < 70 ~ "high",
TRUE ~ "very high")) %>%
ggplot() + geom_boxplot(aes(x = life_level, y = gdpPercap)) +
labs(y = "GDP per capita, $", x= "Life expectancy level, years") +
theme_bw()
gapminder %>%
filter(year == 1997) %>%
mutate(life_level = case_when(lifeExp < 23 ~ "very low",
lifeExp < 48 ~ "low",
lifeExp < 59 ~ "moderate",
lifeExp < 70 ~ "high",
TRUE ~ "very high") ,
levels = c("very low", "low", "moderate", "high", "very high")) %>%
ggplot() + geom_boxplot(aes(x = life_level, y = gdpPercap)) +
labs(y = "GDP per capita, $", x= "Life expectancy level, years") +
theme_bw()
gapminder %>%
filter(year == 1997) %>%
mutate(life_level = factor(case_when(lifeExp < 23 ~ "very low",
lifeExp < 48 ~ "low",
lifeExp < 59 ~ "moderate",
lifeExp < 70 ~ "high",
TRUE ~ "very high") ,
levels = c("very low", "low", "moderate", "high", "very high"))) %>%
ggplot() + geom_boxplot(aes(x = life_level, y = gdpPercap)) +
labs(y = "GDP per capita, $", x= "Life expectancy level, years") +
theme_bw()
gapminder %>%
filter(year == 1997) %>%
mutate(life_level = factor(case_when(lifeExp < 23 ~ "very low",
lifeExp < 48 ~ "low",
lifeExp < 59 ~ "moderate",
lifeExp < 70 ~ "high",
TRUE ~ "very high") ,
levels = c("very low", "low", "moderate", "high", "very high"))) %>%
ggplot() + geom_boxplot(aes(x = life_level, y = gdpPercap)) +
labs(y = "GDP per capita, $", x= "Life expectancy level, years") +
theme_bw() +
scale_x_discrete(drop = FALSE)
class(gapminder$continent)
nlevels(gapminder$continent)
levels(gapminder$continent)
str(filter(gapminder, continent == "Asia"))
str(filter(gapminder, continent))
== "Asia"
str(filter(gapminder, continent == "Asia"))
nlevels(gapminder$country)
nlevels(gapminder$country)
h_countries <- c("China", "India", "Japan", "Egypt", "Cambodia")
h_gap <- gapminder%>%
filter(country %in% h_countries)
nlevels(h_gap$country)
nlevels(gapminder$country)
h_countries <- c("China", "India", "Japan", "Egypt", "Cambodia")
h_gap <- gapminder%>%
filter(country %in% h_countries)
nlevels(h_gap$country)
h_gap_dropped <- gap %>%
droplevels()
h_gap_dropped <- h_gap %>%
droplevels()
h_gap_dropped <- h_gap %>%
droplevels()
h_gap_dropped <- h_gap %>%
droplevels()
h_gap_dropped$country %>%
nlevels()
h_gap <- gapminder%>%
filter(country %in% h_countries)
nlevels(h_gap$country)
h_gap_dropped <- h_gap %>%
forcats::fct_drop()
gapminder%>%
count(continent)
gapminder %>%
ggplot() +
geom_bar(aes(continent)) +
coord_flip() +
theme_bw() +
ylab("Number of entries") + xlab("Continent")
gapminder %>%
ggplot() +
geom_bar(aes(fct_rev(continent))) +
coord_flip()+
theme_bw() +
ylab("Number of entries") + xlab("Continent")
gapminder %>%
ggplot() +
geom_bar(aes(fct_infreq(continent))) +
coord_flip()+
theme_bw() +
ylab("Number of entries") + xlab("Continent")
##  default summarizing function is median()
gapminder %>%
ggplot() +
geom_bar(aes(fct_reorder(continent, lifeExp, max))) +
coord_flip()+
theme_bw() +
ylab("Number of entries") + xlab("Continent")
## order by life expectancy
ggplot(h_gap, aes(x = year, y = lifeExp,
color = FILL_IN_THIS)) +
geom_line() +
labs(color = "country")
## order by life expectancy
ggplot(h_gap, aes(x = year, y = lifeExp,
color = fct_reorder2(country, year, lifeExp))) +
geom_line() +
labs(color = "country")
gapminder %>%
ggplot() +
geom_bar(aes(fct_relevel(continent, "Oceania")))+
coord_flip()+
theme_bw() +
ylab("Number_of_entries")
+ xlab("continent")
gapminder %>%
ggplot() +
geom_bar(aes(fct_relevel(continent, "Oceania")))+
coord_flip()+
theme_bw()
gapminder %>%
ggplot() +
geom_bar(aes(fct_recode(continent, "OCN" = "Oceania", "AME" = "Americas"))) +
coord_flip()+
theme_bw() +
ylab("Number of entries") +
xlab("Continent")
df1 <- gapminder %>%
filter(country %in% c("Japan", "India"), year > 2000) %>%
droplevels()
df1 <- gapminder %>%
filter(country %in% c("Japan", "India"), year > 2000) %>%
droplevels()
df2 <- gapminder %>%
filter(country %in% c("China", "Cambodia"), year > 2000) %>%
droplevels()
c(df1$counrty, df2$country)
fct_c(df1$country, df2$country)
bind_rows(df1, df2)
bind_rows(df1, df2)
# Unequal factor levels: coercing to characterbinding character and factor vector, coercing into character vectorbinding character and factor vector, coercing into character vector
rbind(df1, df2)
# set working directory
setwd("D:/BIOL448J_Lab/Lab04")
# load packages
library(tidyverse)
################################## Before working ###########################################
## read dataset
# read kelp_otu
kelp_otu = read.table("Lemay_kelp_OTUtable.txt",
header = TRUE, sep = "\t",comment.char="&" ) # read OTU table
kelp_otu = as.data.frame(kelp_otu[,-2]) # remove taxonomy
col_names_otu = kelp_otu$X.OTU.ID # store OTU.ID as future column names
kelp_otu = as.data.frame(t(kelp_otu[,-1])) # rotate columns and rows
names(kelp_otu) = col_names_otu # add OTU.ID as column names
kelp_otu <- cbind(X.SampleID = rownames(kelp_otu), data.frame(kelp_otu, row.names=NULL))
# read kelp_metadata
kelp_metadata = read.table("Lemay_kelp_matadata.txt",
header = TRUE, sep = "\t", comment.char="&") # read metadata
kelp_metadata$X.SampleID = sub("-",".",kelp_metadata$X.SampleID) # replace "-" with "."
## store colors here
my_colors=c("#d13b00","#2e12bc","#a7b32f","#9d38e9","#256600","#ff69e2","#01be89","#ff2998",
"#655700","#0069d3","#f99128","#014d91","#ff3672","#ada0f4","#6c240b","#ff6ed2",
"#6e1c3b","#f488bf","#c50050","#6e4974")
## Task 1)
# filter out samples that do not appear in both otu and metadata
kelp_otu_metadata = inner_join(kelp_metadata,kelp_otu,by="X.SampleID")
## Task 2)
# split kelp_otu_metadata to kelp_otu and kelp_metadata
kelp_metadata = kelp_otu_metadata[,1:20] # metadata
install
install.packages("plotly")
library(plotly)
library(gapminder)
library(tidyverse)
(p <- ggplot（gapminder, aes(x = gdpPercap, y = lifeExp, color = continent) +
p
p <- ggplot（gapminder, aes(x = gdpPercap, y = lifeExp, color = continent) +
p <- ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent)) +
geom_point()
p
p %>%
ggplotly
#
gapminder %>%
plot_ly(x = ~gdpPercap,
y = lifeExp,
color = ~continent,
type = "scatter",
mode = "markers") # line for line graph
#
gapminder %>%
plot_ly(x = ~gdpPercap,
y = ~lifeExp,
color = ~continent,
type = "scatter",
mode = "markers") # line for line graph
Sys.setenv("plotly_username" = "qiyangqd")
Sys.setenv("plotly_api_key" = "AJPXMHEx1yXieA0VtkDM")
api_create(p, filename = "cm013-plotly-example")
p <- ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent)) +
geom_point()
# interactive
p %>%
ggplotly
#
gapminder %>%
plot_ly(x = ~gdpPercap,
y = ~lifeExp,
color = ~continent,
type = "scatter",
mode = "markers") # line for line graph
library(tidyverse)
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
labs(x = "Weight (1000's of lbs)")
ggplot(mtcars, aes(qsec, drat)) +
geom_point() +
labs(x = "Quarter mile time",
y = "Rear axle ratio")
(my_lm <- lm(lifeExp, ~ year, gapminder_France))
suppressPackageStartupMessages(library(tidyverse))
library(gapminder)
library(broom)
(my_lm <- lm(lifeExp, ~ year, gapminder_France))
gapminder_France <- gapminder %>%
filter(country == "France") %>%
gapminder_France <- gapminder %>%
filter(country == "France") %>%
library(tidyverse)
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
labs(x = "Weight (1000's of lbs)")
ggplot(mtcars, aes(qsec, drat)) +
geom_point() +
labs(x = "Quarter mile time",
y = "Rear axle ratio")
gapminder_France <- gapminder %>%
filter(country == "France") %>%
gapminder_France <- gapminder %>%
filter(country == "France")
(my_lm <- lm(lifeExp, ~ year, gapminder_France))
gapminder_France <- gapminder %>%
filter(country == "France")
(my_lm <- lm(lifeExp, ~ year, gapminder_France))
(my_lm <- lm(lifeExp, ~ year, gapminder_France))
suppressPackageStartupMessages(library(tidyverse))
library(gapminder)
library(broom)
library(tidyverse)
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
labs(x = "Weight (1000's of lbs)")
ggplot(mtcars, aes(qsec, drat)) +
geom_point() +
labs(x = "Quarter mile time",
y = "Rear axle ratio")
gapminder_France <- gapminder %>%
filter(country == "France")
(my_lm <- lm(lifeExp, ~ year, gapminder_France))
(my_lm <- lm(pop, ~ year, gapminder_France))
(gapminder_France <- gapminder %>%
filter(country == "France"))
(my_lm <- lm(gdpPercap, ~ year, gapminder_France))
(my_lm <- lm(lifeExp ~ I(year-1952), data = gapminder_France))
(my_lm <- lm(lifeExp ~ year, gapminder_France))
unclass(my_lm)
summary(my_lm)
predict(my_lm) %>%
head()
predict(my_lm)
gapminder_France
gapminder_France2 <- data_frame(years = seq(2000, 2005)) # a new dataframe
predict(my_lm, newdata = gapminder_France2) %>%  # how the model predicts
head()
gapminder_France2 <- data_frame(year = seq(2000, 2005)) # a new dataframe
predict(my_lm, newdata = gapminder_France2) %>%  # how the model predicts
head()
plot(my_lm)
ggplot(gapminder, aes(gdpPercap, lifeExp)) +
geom_point() +
geom_smooth(method="lm") +
scale_x_log10()
ggplot(gapminder, aes(gdpPercap, lifeExp)) +
geom_point() +
geom_smooth(method="lm", se = F) +
scale_x_log10()
gapminder_Zimbabwe <- gapminder %>% filter(country = "Zimbabwe")
gapminder_Zimbabwe <- gapminder %>% filter(country == "Zimbabwe")
gapminder_Zimbabwe %>% ggplot(aes(year, lifeExp)) + geom_point()
ggplot(gapminder_Zimbabwe, aes(year,lifeExp)) + geom_point()+geom_smooth(method = "lm", se = F)
ggplot(gapminder_Zimbabwe, aes(year, lifeExp))+
geom_point()+geom_smooth(method = "lm", formula = lifeExp ~
poly(I(year - 1952), degree = 2))
ggplot(gapminder_Zimbabwe, aes(year,lifeExp)) + geom_point()+geom_smooth(method = "lm", se = F)
ggplot(gapminder_Zimbabwe, aes(year, lifeExp))+
geom_point()+geom_smooth(method = "lm", formula = lifeExp ~
poly(I(year - 1952), degree = 2))
ggplot(gapminder_Zimbabwe, aes(year, lifeExp))+
geom_point()+geom_smooth(method = "lm", formula = y ~ poly(I(x - 1952), degree = 2))
lm_resid <- augment(my_lm)
ggplot(lm_resid, aes(.resid)) + geom_freqpoly(binwidth=0.5)
latex
library(latex)
install.packages('tinytex')
tinytex::install_tinytex()
tinytex::install_tinytex()
tinytex::install_tinytex()
tinytex::tinytex_root()
tinytex:::is_tinytex()
uninstall.tinytex
uninstall.tinytex()
tinytex::uninstall_tinytex()
tinytex::install_tinytex()
tinytex::reinstall_tinytex()
