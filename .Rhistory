name = rep(c("Alex", "Robert", "Sam"), c(3, 2, 1)),
trt  = rep(c("a", "b", "a"), c(3, 2, 1)),
rep = c(1, 2, 3, 1, 2, 1),
measurement_1 = runif(6),
measurement_2 = runif(6)
)
experiment %>% complete(name, trt, rep)
experiment <- tibble(
name = rep(c("Alex", "Robert", "Sam"), c(3, 2, 1)),
trt  = rep(c("a", "b", "a"), c(3, 2, 1)),
rep = c(1, 2, 3, 1, 2, 1),
measurement_1 = runif(6),
measurement_2 = runif(6)
)
experiment %>% complete(nesting(name, trt, rep))
experiment <- tibble(
name = rep(c("Alex", "Robert", "Sam"), c(3, 2, 1)),
trt  = rep(c("a", "b", "a"), c(3, 2, 1)),
rep = c(1, 2, 3, 1, 2, 1),
measurement_1 = runif(6),
measurement_2 = runif(6)
)
experiment %>% complete(nesting(name, trt, rep))
knitr::opts_chunk$set(error = TRUE, warning = FALSE)
library(tidyverse)
library(tidyr)
lotr  <- read_csv("https://raw.githubusercontent.com/jennybc/lotr-tidy/master/data/lotr_tidy.csv")
guest <- read_csv("https://raw.githubusercontent.com/STAT545-UBC/Classroom/master/data/wedding/attend.csv")
email <- read_csv("https://raw.githubusercontent.com/STAT545-UBC/Classroom/master/data/wedding/emails.csv")
experiment <- tibble(
name = rep(c("Alex", "Robert", "Sam"), c(3, 2, 1)),
trt  = rep(c("a", "b", "a"), c(3, 2, 1)),
rep = c(1, 2, 3, 1, 2, 1),
measurement_1 = runif(6),
measurement_2 = runif(6)
)
experiment %>% complete(nesting(name, trt, rep))
gapminder %>%
filter(continent == "Americas") %>%
ggplot(aes(country, lifeExp)) +
geom_point() +
geom_boxplot()
library(tidyverse)
library(gapminder)
library(ggridges)
library(scales)
gapminder %>%
filter(continent == "Americas") %>%
ggplot(aes(country, lifeExp)) +
geom_point() +
geom_boxplot()
gapminder %>%
filter(continent == "Americas") %>%
ggplot(aes(lifeExp, country)) +
ggridges::geom_density_ridges()
geom_rug()
gapminder %>%
filter(continent == "Americas") %>%
ggplot(aes(lifeExp, country)) +
ggridges::geom_density_ridges()
geom_rug()
gapminder %>%
filter(continent == "Americas") %>%
mutate(country = fct_reorder(country, lifeExp, median)) %>%
ggplot(aes(lifeExp, country)) +
ggridges::geom_density_ridges()
install.packages("vegan")
setwd("D:/BIOL448J_Lab/Lab03")
source("pairwise.adonis.r")
# Load packages
library(tidyverse)
if(!require(vegan)){
install.packages("vegan")
library(vegan)
}
#################
### Functions ###
#################
# Function to run the ellipse calculation for each of column specified by group
# Uasge: calculate_ellipse(seagrass,"region")
# Will output a data frame with three columns,
#    one called "filter" for the column you are filtering by
#    and one each for MDS1 and MDS2
calculate_ellipse = function(df,filter_by){
# Function to calculate the 95% ci ellipses for each sample
veganCovEllipse <- function (cov, center = c(0, 0), scale = 1, npoints = 100)
{
theta <- (0:npoints) * 2 * pi/npoints
Circle <- cbind(cos(theta), sin(theta))
t(center + scale * t(Circle %*% chol(cov)))
}
df_ellipse <- data.frame()
for(g in unique(df[[filter_by]])){
df_ellipse <- rbind(df_ellipse,cbind(as.data.frame(with(df [df[filter_by]==g,],
veganCovEllipse(cov.wt(cbind(MDS1,MDS2),
wt=rep(1/length(MDS1),length(MDS1)))$cov,center=c(mean(MDS1),mean(MDS2))))),filter=g))
}
return(df_ellipse)
}
# Function to test stress levels at different
# Usage: checkMDSdim(seagrass)
# Optional arguments include
#    iter: the number of times to run MDS for each dimension
#    dimension: a vector of dimensions to run
#    distance, try, and trymax as inputs of metaMDS
checkMDSdim = function(data,iter=1,dimensions=1:5,distance="bray",try=20,trymax=20){
n = length(dimensions*iter)
stress = rep(0,n)
c = 0
for (d in 1:n){
temp = rep(0,iter)
for (i in 1:iter){
c = c + 1
stress[c] = metaMDS(data,k=d,distance=distance,try=try,trymax=trymax)$stress
}
}
output = data.frame(dimension = rep(dimensions,each=iter),
stress = stress)
return(output)
}
seagrass = read.table("Seagrass_2015_otu_metadata_clean.txt")
seagrass = read.table("Seagrass_2015_otu_metadata_clean.txt",
header = TRUE)
view(seagrass)
seagrass_counts = seagrass[-(1:3)]
seagrass = read.table("Seagrass_2015_otu_metadata_clean.txt",
header = TRUE)
seagrass_counts = seagrass[,-(1:3)]
view(seagrass)
seagrass_counts = seagrass[,-(1:3)]
seagrass_metadata = seagrass[,1:3]
view(seagrass_counts)
view(seagrass_metadata)
# set seed
set.seed(1) # when we randomize, it starts from 1st to 2nd to ...
metaMDS(seagrass_counts)
seagrass_MDS = metaMDS(seagrass_counts) #
seagrass_MDS$points
ncol(seagrass_counts)
seagrass_MDS_dim = checkMDSdim(seagrass_counts)
(seagrass_MDS_dim)
+ geom_point()
ggplot(seagrass_MDS_dim, aes(dimension, stress))
+ geom_point()
ggplot(seagrass_MDS_dim, aes(dimension, stress))+
geom_point()
seagrass_MDS_dim = checkMDSdim(seagrass_counts, iter = 3, trymax = 40)
ggplot(seagrass_MDS_dim, aes(dimension, stress))+
geom_point()
# nMDS plot can not only contain samples but also species
# what species is pulling spread
# may not very useful
seagrass_MDS$stress
stressplot(seagrass_MDS)
sample_MDS = cbind(seagrass_MDS$points, seagrass_metadata)
sample_MDS = data.frame(cbind(seagrass_MDS$points, seagrass_metadata))
sample_MDS
ggplot(sample_MDS, aes(MDS1, MDS2))
+geom_point()
ggplot(sample_MDS, aes(MDS1, MDS2))
+ geom_point()
sample_MDS = data.frame(cbind(seagrass_MDS$points, seagrass_metadata))
species_MDS = data.frame(cbind(rownames(seagrass_counts), seagrass_metadata))
ggplot(sample_MDS, aes(MDS1, MDS2))
+ geom_point()
ggplot(sample_MDS, aes(MDS1, MDS2))+geom_point()
ggplot(sample_MDS, aes(MDS1, MDS2), color = region)+geom_point()
ggplot(sample_MDS, aes(MDS1, MDS2), color = region)+geom_point()
ggplot(sample_MDS, aes(MDS1, MDS2,color = region))+geom_point()
ggplot(sample_MDS, aes(MDS1, MDS2,color = region, shape = region))+geom_point()
ggplot(sample_MDS, aes(MDS1, MDS2,shape = region)) + geom_point()
color = region,
ggplot(sample_MDS, aes(MDS1, MDS2,color = region, shape = region)) + geom_point()
ggplot(sample_MDS, aes(MDS1, MDS2,color = region, shape = sample_growth)) + geom_point()
plot1 = ggplot(sample_MDS, aes(MDS1, MDS2,color = region, shape = sample_growth)) + geom_point()
plot1+ coord_fixed()
plot1 = ggplot(sample_MDS, aes(MDS1, MDS2,color = region, shape = sample_growth)) + geom_point()
ggplot(sample_MDS, aes(MDS1, MDS2,color = region, shape = sample_growth)) + geom_point()
plot1+ coord_fixed()
plot1 = ggplot(sample_MDS, aes(MDS1, MDS2,color = sample_growth, shape = sample_growth)) + geom_point()
# big drop: some dimensions are not important compared to some very important ones
plot1+ coord_fixed()
plot1 = ggplot(sample_MDS, aes(MDS1, MDS2,color = sample_growth, shape = regio)) + geom_ponint()
# big drop: some dimensions are not important compared to some very important ones
plot1+ coord_fixed()
sample_MDS_centroid = calculate_ellipse(seagrass_MDS, "sample growth")
sample_MDS_centroid
sample_MDS_centroid
sample_MDS_centroid = calculate_ellipse(seagrass_MDS, "sample_growth")
sample_MDS_centroid
sample_MDS_centroid = calculate_ellipse(sample_MDS, "sample_growth")
sample_MDS_centroid
plot1 = ggplot(sample_MDS, aes(MDS1, MDS2,color = sample_growth, shape = region)) + geom_ponint()
# big drop: some dimensions are not important compared to some very important ones
plot1+ coord_fixed()
plot1 = ggplot(sample_MDS, aes(MDS1, MDS2,color = sample_growth, shape = region)) + geom_point()
# big drop: some dimensions are not important compared to some very important ones
plot1+ coord_fixed()
plot1+geom_path(data=sample_MDS_centroid, aes(color = filter))
plot1+geom_path(data=sample_MDS_centroid, aes(color = filter))
plot1 = plot1+ coord_fixed()
plot1+geom_path(data=sample_MDS_centroid, aes(color = filter))
plot1 = ggplot(sample_MDS, aes(MDS1, MDS2)) + geom_point(aes(color = sample_growth, shape = region))
# big drop: some dimensions are not important compared to some very important ones
plot1 = plot1+ coord_fixed()
sample_MDS_centroid = calculate_ellipse(sample_MDS, "sample_growth")
sample_MDS_centroid
plot1+geom_path(data=sample_MDS_centroid, aes(color = filter))
seagrass_MDS$stress
# permanova: anova from one dimension
seagrass_permanova = adonis(seagrass_counts~ sample_growth, data = seagrass_metadata)
seagrass_permanova
# post hoc
pairwise.adonis(seagrass_counts, seagrass_metadata$sample_growth)
# post hoc
pairwise.adonis(seagrass_counts, seagrass_metadata$sample_growth)
# p.adjusted all the same: these samples are different
seagrass_permanova = adonis(seagrass_counts~ region, data = seagrass_metadata)
seagrass_permanova
# p.adjusted all the same: these samples are different
pairwise.adonis(seagrass_counts, seagrass_metadata$region)
seagrass_MDS_dim = checkMDSdim(seagrass_counts, iter = 3, trymax = 40)
(seagrass_MDS_dim)
ggplot(seagrass_MDS_dim, aes(dimension, stress))+
geom_point()
species_MDS = data.frame(cbind(rownames(seagrass_counts), seagrass_metadata))
plot1 = ggplot(sample_MDS, aes(MDS1, MDS2)) + geom_point(aes(color = sample_growth, shape = region))
# big drop: some dimensions are not important compared to some very important ones
plot1 = plot1+ coord_fixed()
plot1
ncol(seagrass_counts)
sample_MDS_centroid = calculate_ellipse(sample_MDS, "sample_growth")
sample_MDS_centroid
library(tidyverse)
library(tidyr)
lotr  <- read_csv("https://raw.githubusercontent.com/jennybc/lotr-tidy/master/data/lotr_tidy.csv")
guest <- read_csv("https://raw.githubusercontent.com/STAT545-UBC/Classroom/master/data/wedding/attend.csv")
email <- read_csv("https://raw.githubusercontent.com/STAT545-UBC/Classroom/master/data/wedding/emails.csv")
knitr::opts_chunk$set(error = TRUE, warning = FALSE)
data("HairEyeColor")
data("HairEyeColor")
haireye %>%
DT::datatable()
haireye <- data("HairEyeColor")
haireye %>%
DT::datatable()
library(tidyverse)
library(tidyr)
library(DT)
lotr  <- read_csv("https://raw.githubusercontent.com/jennybc/lotr-tidy/master/data/lotr_tidy.csv")
guest <- read_csv("https://raw.githubusercontent.com/STAT545-UBC/Classroom/master/data/wedding/attend.csv")
email <- read_csv("https://raw.githubusercontent.com/STAT545-UBC/Classroom/master/data/wedding/emails.csv")
haireye <- data("HairEyeColor")
haireye %>%
DT::datatable(rownames = FALSE)
haireye <- datasets::("HairEyeColor")
haireye <- datasets::HairEyeColor
haireye %>%
DT::datatable(rownames = FALSE)
haireye <- datasets::HairEyeColor
haireye %>%
DT::datatable(rownames = FALSE)
haireye <- as_tibble(HairEyeColor) %>%
count(Hair, Eye, wt = n) %>%
rename(hair = Hair, eye = Eye)
haireye <- as_tibble(HairEyeColor) %>%
count(Hair, Eye, wt = n) %>%
rename(hair = Hair, eye = Eye)
haireye %>%
DT::datatable()
haireye <- as_tibble(HairEyeColor) %>%
count(Hair, Eye, wt = n) %>%
rename(hair = Hair, eye = Eye)
haireye %>%
DT::datatable(rownames = FALSE)
library(tidyverse)
lotr  <- read_csv("https://raw.githubusercontent.com/jennybc/lotr-tidy/master/data/lotr_tidy.csv")
guest <- read_csv("https://raw.githubusercontent.com/STAT545-UBC/Classroom/master/data/wedding/attend.csv")
email <- read_csv("https://raw.githubusercontent.com/STAT545-UBC/Classroom/master/data/wedding/emails.csv")
knitr::opts_chunk$set(error = TRUE, warning = FALSE)
lotr
(lotr_wide <- lotr %>%
pivot_wider(id_col = c(-Race, -Words),
names_from = Race,
values_from = Words))
lotr_wide %>%
pivot_longer(cols = c(-Film, -Gender),
names_to  = "Race",
values_to = "Words")
guest %>%
DT::datatable(rownames = FALSE)
(guest_long <- guest %>%
pivot_longer(cols      = c(-party, -name),
names_to  = c("event"),
names_sep = "_",
values_to = c("meal", "attendance")))
(guest_long <- guest %>%
pivot_longer(cols      = c(-party, -name),
names_to  = c("event"),
names_sep = " ",
values_to = c("meal", "attendance")))
(guest_long <- guest %>%
pivot_longer(cols      = c(-party, -name),
names_to  = c("event"),
names_sep = " ",
values_to = c("attendance")))
(guest_long <- guest %>%
pivot_longer(cols      = c(-party, -name),
names_to  = c("event","meal"),
names_sep = " ",
values_to = c("attendance")))
(guest_long <- guest %>%
pivot_longer(cols      = c(-party, -name),
names_to  = c(".value", "event"),
names_sep = "_"))
(guest_long <- guest %>%
pivot_longer(cols      = c(-party, -name),
names_to  = c("event",".value"),
names_sep = "_"))
(guest_long <- guest %>%
pivot_longer(cols      = c(-party, -name),
names_to  = c(".value","event"),
names_sep = "_"))
guest_long %>%
separate(name, into = c("Fisrt", "Last"), sep = " ")
# unite(col = "name", FILL_THIS_IN, sep = FILL_THIS_IN)
guest_long %>%
separate(name, into = c("Fisrt", "Last"), sep = " ")
unite(col = "name", First, Last, sep = " ")
guest_long %>%
separate(name, into = c("Fisrt", "Last"), sep = " ") %>%
unite(col = "name", First, Last, sep = " ")
guest_long %>%
separate(name, into = c("Fisrt", "Last"), sep = " ") %>%
unite(col = "name", First, Last, sep = " ")
guest_long %>%
separate(name, into = c("Firstt", "Last"), sep = " ") %>%
unite(col = "name", First, Last, sep = " ")
guest_long %>%
separate(name, into = c("First", "Last"), sep = " ") %>%
unite(col = "name", First, Last, sep = " ")
guest_long %>%
group_by(party) %>%
summarize(all_pending = all(attendance == "PENDING"))
guest %>%
group_by(party) %>%
summarize(pending_wedding = all(attendance_wedding== "PENDING"))
guest %>%
group_by(party) %>%
summarize(pending_wedding = all(attendance_wedding == "PENDING"))
guest_long %>%
pivot_wider(id_cols     = c(-party, -name),
names_from  = "event",
names_sep   = "_",
values_from = c("meal", "attendance"))
(guest_long <- guest %>%
pivot_longer(cols      = c(party, name),
names_to  = c(".value", "event"),
names_sep = "_"))
(guest_long <- guest %>%
pivot_longer(cols      = c(-party, -name),
names_to  = c(".value", "event"),
names_sep = "_"))
guest_long %>%
pivot_wider(id_cols     = c(party, name),
names_from  = c(event),
names_sep   = "_",
values_from = c(meal, attendance) ) # Tricky!
guest_long %>%
pivot_wider(id_cols     = c(party, name),
names_from  = c(event),
names_sep   = "_",
values_from = c(meal, attendance) ) # Tricky!
guest_long %>%
pivot_wider(id_cols     = c(party, name),
names_from  = "event",
names_sep   = "_",
values_from = c("meal", "attendance"))
email %>%
separate_rows(guest, sep = ", ")
email %>%
separate_rows(FILL_THIS_IN, sep = FILL_THIS_IN)
email %>%
separate_rows(FILL_THIS_IN, sep = FILL_THIS_IN)
email %>%
email
email %>%
separate_rows(guest, sep = " ")
email
email %>%
separate_rows(guest, sep = " ")
email %>%
separate_rows(guest, sep = ", ")
experiment <- tibble(
name = rep(c("Alex", "Robert", "Sam"), c(3, 2, 1)),
trt  = rep(c("a", "b", "a"), c(3, 2, 1)),
rep = c(1, 2, 3, 1, 2, 1),
measurement_1 = runif(6),
measurement_2 = runif(6)
)
experiment %>% expand(name, trt, rep)
n <- 100
mu <- c(-5, 0, 5)
sd <- c(1, 3, 10)
FILL_THIS_IN(mu = mu, sd = sd) %>%
group_by_all() %>%
mutate(z = list(rnorm(n, mu, sd))) %>%
FILL_THIS_IN
n <- 100
tibble(label = "Sample A",
x = rnorm(n),
y = x + rnorm(n))
n <- 100
tibble(label = "Sample A",
x = rnorm(n),
y = x + rnorm(n))
n <- 100
tibble(label = "Sample A",
x = rnorm(n),
y = rnorm(n) + x) # why different
songs <- read_csv("https://raw.githubusercontent.com/STAT545-UBC/Classroom/master/data/singer/songs.csv")
locations <- read_csv("https://raw.githubusercontent.com/STAT545-UBC/Classroom/master/data/singer/loc.csv")
```
```
songs <- read_csv("https://raw.githubusercontent.com/STAT545-UBC/Classroom/master/data/singer/songs.csv")
locations <- read_csv("https://raw.githubusercontent.com/STAT545-UBC/Classroom/master/data/singer/loc.csv")
```
```
install.packages("devtools")
devtools::install_github("JoeyBernhardt/singer")
```
devtools::install_github("JoeyBernhardt/singer")
library(tidyverse)
library(singer)
knitr::opts_chunk$set(fig.width=4, fig.height=3, warning = FALSE, fig.align = "center")
(time <- as_tibble(songs) %>%
rename(song = title))
(album <- as_tibble(locations) %>%
select(title, everything()) %>%
rename(album = release,
song  = title))
time %>%
left_join(album, by = "song")
time %>%
inner_join(album, by = "song")
time %>%
inner_join(album, by = c("song", "artist_name"))
time %>%
left_join(album, by = c("song", "artist_name"))
time %>%
left_join(album, by = c("song", "artist_name")) %>%
# select(city)
time %>%
left_join(album, by = c("song", "artist_name")) %>%
select(city)
time %>%
left_join(album, by = c("song", "artist_name"))
# select(city)
select(-city)
time %>%
left_join(album, by = c("song", "artist_name"))
time %>%
left_join(album, by = c("song", "artist_name")) %>%
select(time, -city)
time %>%
left_join(album, by = c("song", "artist_name"))
time %>%
left_join(album, by = c("song", "artist_name")) %>%
select("song", "artist_name")
time %>%
left_join(album, by = c("song", "artist_name")) %>%
select(time, -"year")
time %>%
left_join(album, by = c("song", "artist_name")) %>%
select("song", "artist_name", "year","album")
time %>%
anti_join(album, by = "song")
time %>%
anti_join(album, by = "artist_name")
time %>%
full_join(album, by = c("song","artist_name"))
fell <- read_csv("https://raw.githubusercontent.com/jennybc/lotr-tidy/master/data/The_Fellowship_Of_The_Ring.csv")
ttow <- read_csv("https://raw.githubusercontent.com/jennybc/lotr-tidy/master/data/The_Two_Towers.csv")
retk <- read_csv("https://raw.githubusercontent.com/jennybc/lotr-tidy/master/data/The_Return_Of_The_King.csv")
fell <- read_csv("https://raw.githubusercontent.com/jennybc/lotr-tidy/master/data/The_Fellowship_Of_The_Ring.csv")
ttow <- read_csv("https://raw.githubusercontent.com/jennybc/lotr-tidy/master/data/The_Two_Towers.csv")
retk <- read_csv("https://raw.githubusercontent.com/jennybc/lotr-tidy/master/data/The_Return_Of_The_King.csv")
bind_rows(fell, ttow, retk)
fell
ttow
retk
fell
fell %>%
anti_join(ttow, by = "Race") %>%
anti_join(retk, by = "Race")
fell %>%
anti_join(ttow, by = "Race") %>%
anti_join(retk, by = "Race")
(y <-  tibble(x1 = LETTERS[1:3], x2 = 1:3))
(z <- tibble(x1 = c("B", "C", "D"), x2 = 2:4))
intersect(y, z)
intersect(y, z)
inner_join(y, z)
union(
mutate(y, day = "Day 1"),
mutate(z, day = "Day 2")
)
bind_rows(
mutate(y, day = "Day 1"),
mutate(z, day = "Day 2")
)
setdiff(y, z)
